I"s*<p>For the next step, get into pairs.  One person will be the “Owner” and the other
will be the “Collaborator”. The goal is that the Collaborator add changes into
the Owner’s repository. We will switch roles at the end, so both persons will
play Owner and Collaborator.</p>

<blockquote class="callout">
  <h2 id="practicing-by-yourself">Practicing By Yourself</h2>

  <p>If you’re working through this lesson on your own, you can carry on by opening
a second terminal window.
This window will represent your partner, working on another computer. You
won’t need to give anyone access on GitHub, because both ‘partners’ are you.</p>
</blockquote>

<p>The Owner needs to give the Collaborator access. On GitHub, click the settings
button on the right, select Manage access, click Invite a collaborator, and
then enter your partner’s username.</p>

<p><img src="../fig/github-add-collaborators.png" alt="Adding Collaborators on GitHub" /></p>

<p>To accept access to the Owner’s repo, the Collaborator
needs to go to <a href="https://github.com/notifications">https://github.com/notifications</a>.
Once there she can accept access to the Owner’s repo.</p>

<p>Next, the Collaborator needs to download a copy of the Owner’s repository to her
 machine. This is called “cloning a repo”. To clone the Owner’s repo into
her <code class="language-plaintext highlighter-rouge">Desktop</code> folder, the Collaborator enters:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/vlad/planets.git ~/Desktop/vlad-planets
</code></pre></div></div>

<p>Replace ‘vlad’ with the Owner’s username.</p>

<p><img src="../fig/github-collaboration.svg" alt="After Creating Clone of Repository" /></p>

<p>The Collaborator can now make a change in her clone of the Owner’s repository,
exactly the same way as we’ve been doing before:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~/Desktop/vlad-planets
<span class="nv">$ </span>nano pluto.txt
<span class="nv">$ </span><span class="nb">cat </span>pluto.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>It is so a planet!
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add pluto.txt
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Add notes about Pluto"</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 1 file changed, 1 insertion(+)
 create mode 100644 pluto.txt
</code></pre></div></div>

<p>Then push the change to the <em>Owner’s repository</em> on GitHub:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git push origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enumerating objects: 4, done.
Counting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 306 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/vlad/planets.git
   9272da5..29aba7c  master -&gt; master
</code></pre></div></div>

<p>Note that we didn’t have to create a remote called <code class="language-plaintext highlighter-rouge">origin</code>: Git uses this
name by default when we clone a repository.  (This is why <code class="language-plaintext highlighter-rouge">origin</code> was a
sensible choice earlier when we were setting up remotes by hand.)</p>

<blockquote class="callout">
  <h2 id="some-more-about-remotes">Some more about remotes</h2>

  <p>In this episode and the previous one, our local repository has had
a single “remote”, called <code class="language-plaintext highlighter-rouge">origin</code>. A remote is a copy of the repository
that is hosted somewhere else, that we can push to and pull from, and 
there’s no reason that you have to work with only one. For example, 
on some large projects you might have your own copy in your own GitHub
account (you’d probably call this <code class="language-plaintext highlighter-rouge">origin</code>) and also the main “upstream”
project repository (let’s call this <code class="language-plaintext highlighter-rouge">upstream</code> for the sake of examples).
You would pull from <code class="language-plaintext highlighter-rouge">upstream</code> from time to 
time to get the latest updates that other people have committed.</p>

  <p>Remember that the name you give to a remote only exists locally. It’s
an alias that you choose - whether <code class="language-plaintext highlighter-rouge">origin</code>, or <code class="language-plaintext highlighter-rouge">upstream</code>, or <code class="language-plaintext highlighter-rouge">fred</code> -
and not something intrinstic to the remote repository.</p>

  <p>The <code class="language-plaintext highlighter-rouge">git remote</code> family of commands is used to set up and alter the remotes
associated with a repository. Here are some of the most useful ones:</p>

  <ul>
    <li><code class="language-plaintext highlighter-rouge">git remote -v</code> lists all the remotes that are configured (we already used
this in the last episode)</li>
    <li><code class="language-plaintext highlighter-rouge">git remote add [name] [url]</code> is used to add a new remote</li>
    <li><code class="language-plaintext highlighter-rouge">git remote remove [name]</code> removes a remote. Note that it doesn’t affect the 
remote repository at all - it just removes the link to it from the local repo.</li>
    <li><code class="language-plaintext highlighter-rouge">git remote set-url [name] [newurl]</code> changes the URL that is associated 
with the remote. This is useful if it has moved, e.g. to a different GitHub
account, or from GitHub to a different hosting service. Or, if we made a typo when
adding it!</li>
    <li><code class="language-plaintext highlighter-rouge">git remote rename [oldname] [newname]</code> changes the local alias by which a remote 
is known - its name. For example, one could use this to change <code class="language-plaintext highlighter-rouge">upstream</code> to <code class="language-plaintext highlighter-rouge">fred</code>.</li>
  </ul>
</blockquote>

<p>Take a look to the Owner’s repository on its GitHub website now (maybe you need
to refresh your browser.) You should be able to see the new commit made by the
Collaborator.</p>

<p>To download the Collaborator’s changes from GitHub, the Owner now enters:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remote: Enumerating objects: 4, done.
remote: Counting objects: 100% (4/4), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/vlad/planets
 * branch            master     -&gt; FETCH_HEAD
   9272da5..29aba7c  master     -&gt; origin/master
Updating 9272da5..29aba7c
Fast-forward
 pluto.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 pluto.txt
</code></pre></div></div>

<p>Now the three repositories (Owner’s local, Collaborator’s local, and Owner’s on
GitHub) are back in sync.</p>

<blockquote class="callout">
  <h2 id="a-basic-collaborative-workflow">A Basic Collaborative Workflow</h2>

  <p>In practice, it is good to be sure that you have an updated version of the
repository you are collaborating on, so you should <code class="language-plaintext highlighter-rouge">git pull</code> before making
our changes. The basic collaborative workflow would be:</p>

  <ul>
    <li>update your local repo with <code class="language-plaintext highlighter-rouge">git pull origin master</code>,</li>
    <li>make your changes and stage them with <code class="language-plaintext highlighter-rouge">git add</code>,</li>
    <li>commit your changes with <code class="language-plaintext highlighter-rouge">git commit -m</code>, and</li>
    <li>upload the changes to GitHub with <code class="language-plaintext highlighter-rouge">git push origin master</code></li>
  </ul>

  <p>It is better to make many commits with smaller changes rather than
of one commit with massive changes: small commits are easier to
read and review.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="switch-roles-and-repeat">Switch Roles and Repeat</h2>

  <p>Switch roles and repeat the whole process.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="review-changes">Review Changes</h2>

  <p>The Owner pushed commits to the repository without giving any information
to the Collaborator. How can the Collaborator find out what has changed with
command line? And on GitHub?</p>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>
    <p>On the command line, the Collaborator can use <code class="language-plaintext highlighter-rouge">git fetch origin master</code>
to get the remote changes into the local repository, but without merging
them. Then by running <code class="language-plaintext highlighter-rouge">git diff master origin/master</code> the Collaborator
will see the changes output in the terminal.</p>

    <p>On GitHub, the Collaborator can go to the repository and click on 
“commits” to view the most recent commits pushed to the repository.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="comment-changes-in-github">Comment Changes in GitHub</h2>

  <p>The Collaborator has some questions about one line change made by the Owner and
has some suggestions to propose.</p>

  <p>With GitHub, it is possible to comment the diff of a commit. Over the line of
code to comment, a blue comment icon appears to open a comment window.</p>

  <p>The Collaborator posts its comments and suggestions using GitHub interface.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="version-history-backup-and-version-control">Version History, Backup, and Version Control</h2>

  <p>Some backup software can keep a history of the versions of your files. They also
allows you to recover specific versions. How is this functionality different from version control?
What are some of the benefits of using version control, Git and GitHub?</p>
</blockquote>
:ET