I"«)<p>Once Git is configured,
we can start using it.</p>

<p>We will continue with the story of Wolfman and Dracula who are investigating if it
is possible to send a planetary lander to Mars.</p>

<p><img src="../fig/motivatingexample.png" alt="motivatingexample" />
<a href="https://www.deviantart.com/b-maze/art/Werewolf-vs-Dracula-124893530">Werewolf vs dracula</a>
by <a href="https://www.deviantart.com/b-maze">b-maze</a> / <a href="https://www.deviantart.com/">Deviant Art</a>.
<a href="https://en.wikipedia.org/wiki/File:OSIRIS_Mars_true_color.jpg">Mars</a> by European Space Agency /
<a href="https://creativecommons.org/licenses/by/3.0/deed.en">CC-BY-SA 3.0 IGO</a>.
<a href="https://commons.wikimedia.org/wiki/File:PIA19873-Pluto-NewHorizons-FlyingPastImage-20150714-transparent.png">Pluto</a> /
Courtesy NASA/JPL-Caltech.
<a href="https://commons.wikimedia.org/wiki/File:Mummy_icon_-_Noun_Project_4070.svg">Mummy</a>
¬© Gilad Fried / <a href="https://thenounproject.com/">The Noun Project</a> /
<a href="https://creativecommons.org/licenses/by/3.0/deed.en">CC BY 3.0</a>.
<a href="https://commons.wikimedia.org/wiki/File:Lune_ico.png">Moon</a>
¬© Luc Viatour / <a href="https://lucnix.be/">https://lucnix.be</a> /
<a href="https://creativecommons.org/licenses/by-sa/3.0/deed.en">CC BY-SA 3.0</a>.</p>

<p>First, let‚Äôs create a directory in <code class="language-plaintext highlighter-rouge">Desktop</code> folder for our work and then move into that directory:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~/Desktop
<span class="nv">$ </span><span class="nb">mkdir </span>planets
<span class="nv">$ </span><span class="nb">cd </span>planets
</code></pre></div></div>

<p>Then we tell Git to make <code class="language-plaintext highlighter-rouge">planets</code> a <a href="../reference.html#repository">repository</a>
‚Äì a place where Git can store versions of our files:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git init
</code></pre></div></div>

<p>It is important to note that <code class="language-plaintext highlighter-rouge">git init</code> will create a repository that
includes subdirectories and their files‚Äîthere is no need to create
separate repositories nested within the <code class="language-plaintext highlighter-rouge">planets</code> repository, whether
subdirectories are present from the beginning or added later. Also, note
that the creation of the <code class="language-plaintext highlighter-rouge">planets</code> directory and its initialization as a
repository are completely separate processes.</p>

<p>If we use <code class="language-plaintext highlighter-rouge">ls</code> to show the directory‚Äôs contents,
it appears that nothing has changed:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span>
</code></pre></div></div>

<p>But if we add the <code class="language-plaintext highlighter-rouge">-a</code> flag to show everything,
we can see that Git has created a hidden directory within <code class="language-plaintext highlighter-rouge">planets</code> called <code class="language-plaintext highlighter-rouge">.git</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-a</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.	..	.git
</code></pre></div></div>

<p>Git uses this special subdirectory to store all the information about the project, 
including all files and sub-directories located within the project‚Äôs directory.
If we ever delete the <code class="language-plaintext highlighter-rouge">.git</code> subdirectory,
we will lose the project‚Äôs history.</p>

<p>We can check that everything is set up correctly
by asking Git to tell us the status of our project:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
</code></pre></div></div>
<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master

No commits yet

nothing to commit (create/copy files and use "git add" to track)
</code></pre></div></div>

<p>If you are using a different version of <code class="language-plaintext highlighter-rouge">git</code>, the exact
wording of the output might be slightly different.</p>

<blockquote class="challenge">
  <h2 id="places-to-create-git-repositories">Places to Create Git Repositories</h2>

  <p>Along with tracking information about planets (the project we have already created), 
Dracula would also like to track information about moons.
Despite Wolfman‚Äôs concerns, Dracula creates a <code class="language-plaintext highlighter-rouge">moons</code> project inside his <code class="language-plaintext highlighter-rouge">planets</code> 
project with the following sequence of commands:</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd</span> ~/Desktop   <span class="c"># return to Desktop directory</span>
<span class="nv">$ </span><span class="nb">cd </span>planets     <span class="c"># go into planets directory, which is already a Git repository</span>
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-a</span>          <span class="c"># ensure the .git subdirectory is still present in the planets directory</span>
<span class="nv">$ </span><span class="nb">mkdir </span>moons    <span class="c"># make a subdirectory planets/moons</span>
<span class="nv">$ </span><span class="nb">cd </span>moons       <span class="c"># go into moons subdirectory</span>
<span class="nv">$ </span>git init       <span class="c"># make the moons subdirectory a Git repository</span>
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-a</span>          <span class="c"># ensure the .git subdirectory is present indicating we have created a new Git repository</span>
</code></pre></div>  </div>

  <p>Is the <code class="language-plaintext highlighter-rouge">git init</code> command, run inside the <code class="language-plaintext highlighter-rouge">moons</code> subdirectory, required for 
tracking files stored in the <code class="language-plaintext highlighter-rouge">moons</code> subdirectory?</p>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <p>No. Dracula does not need to make the <code class="language-plaintext highlighter-rouge">moons</code> subdirectory a Git repository 
because the <code class="language-plaintext highlighter-rouge">planets</code> repository will track all files, sub-directories, and 
subdirectory files under the <code class="language-plaintext highlighter-rouge">planets</code> directory.  Thus, in order to track 
all information about moons, Dracula only needed to add the <code class="language-plaintext highlighter-rouge">moons</code> subdirectory
to the <code class="language-plaintext highlighter-rouge">planets</code> directory.</p>

    <p>Additionally, Git repositories can interfere with each other if they are ‚Äúnested‚Äù:
the outer repository will try to version-control
the inner repository. Therefore, it‚Äôs best to create each new Git
repository in a separate directory. To be sure that there is no conflicting
repository in the directory, check the output of <code class="language-plaintext highlighter-rouge">git status</code>. If it looks
like the following, you are good to go to create a new repository as shown
above:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
</code></pre></div>    </div>
    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fatal: Not a git repository (or any of the parent directories): .git
</code></pre></div>    </div>
  </blockquote>
</blockquote>
<blockquote class="challenge">
  <h2 id="correcting-git-init-mistakes">Correcting <code class="language-plaintext highlighter-rouge">git init</code> Mistakes</h2>
  <p>Wolfman explains to Dracula how a nested repository is redundant and may cause confusion
down the road. Dracula would like to remove the nested repository. How can Dracula undo 
his last <code class="language-plaintext highlighter-rouge">git init</code> in the <code class="language-plaintext highlighter-rouge">moons</code> subdirectory?</p>

  <blockquote class="solution">
    <h2 id="solution--use-with-caution">Solution ‚Äì USE WITH CAUTION!</h2>

    <h3 id="background">Background</h3>
    <p>Removing files from a git repository needs to be done with caution. To remove files from the working tree and not from your working directory, use</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">rm </span>filename
</code></pre></div>    </div>

    <p>The file being removed has to be in sync with the branch head with no updates. If there are updates, the file can be removed by force by using the <code class="language-plaintext highlighter-rouge">-f</code> option. Similarly a directory can be removed from git using <code class="language-plaintext highlighter-rouge">rm -r dirname</code> or <code class="language-plaintext highlighter-rouge">rm -rf dirname</code>.</p>

    <h3 id="solution-1">Solution</h3>
    <p>Git keeps all of its files in the <code class="language-plaintext highlighter-rouge">.git</code> directory.
To recover from this little mistake, Dracula can just remove the <code class="language-plaintext highlighter-rouge">.git</code>
folder in the moons subdirectory by running the following command from inside the <code class="language-plaintext highlighter-rouge">planets</code> directory:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">rm</span> <span class="nt">-rf</span> moons/.git
</code></pre></div>    </div>

    <p>But be careful! Running this command in the wrong directory, will remove
the entire Git history of a project you might want to keep. Therefore, always check your current directory using the
command <code class="language-plaintext highlighter-rouge">pwd</code>.</p>
  </blockquote>
</blockquote>
:ET