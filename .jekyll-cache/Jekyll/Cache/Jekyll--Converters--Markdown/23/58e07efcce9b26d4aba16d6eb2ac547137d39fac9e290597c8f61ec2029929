I"∑<p>Version control can be very useful when developing data analysis scripts. For
that reason, the popular development environment
<a href="https://www.rstudio.com/">RStudio</a> for the R programming language has built-in
integration with Git. While some advanced Git features still require the
command-line, RStudio has a nice interface for many common Git operations.</p>

<p>RStudio allows us to create a <a href="https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects">project</a> associated with a
given directory to keep track of various related files. To be able to track the
development of the project over time, to be able to revert to previous
versions, and to collaborate with others, we version control the Rstudio
project with Git. To get started using Git in RStudio, we create a new project:</p>

<p><img src="../fig/RStudio_screenshot_newproject.png" alt="" /></p>

<p>This will open a dialog asking us how we want to create the project. We have
some options here. Let‚Äôs say that we want to use RStudio with the planets
repository that we already made. Since that repository lives in a directory on
our computer, we choose the option ‚ÄúExisting Directory‚Äù:</p>

<p><img src="../fig/RStudio_screenshot_existingdirectory.png" alt="" /></p>

<blockquote class="callout">
  <h2 id="do-you-see-a-version-control-option">Do You See a ‚ÄúVersion Control‚Äù Option?</h2>

  <p>Although we‚Äôre not going to use it here, there should be a ‚Äúversion control‚Äù
option on this menu. That is what you would click on if you wanted to
create a project on your computer by cloning a repository from GitHub.
If that option is not present, it probably means that RStudio doesn‚Äôt know
where your Git executable is, and you won‚Äôt be able to progress further
in this lesson until you tell RStudio where it is.</p>
  <h3 id="find-your-git-executiable">Find your Git Executiable</h3>
  <p>First let‚Äôs make sure that Git is installed on your computer.
Open your shell on Mac or Linux, or on Windows open the command prompt
and then type:</p>
  <ul>
    <li><code class="language-plaintext highlighter-rouge">which git</code> (Mac, Linux)</li>
    <li><code class="language-plaintext highlighter-rouge">where git</code> (Windows)</li>
  </ul>

  <p>If there is no version of Git on your computer, 
please follow the 
<a href="https://swcarpentry.github.io/git-novice/setup.html">Git installation 
instructions</a>
in the setup of this lesson to install Git now. Next open your shell or command prompt 
and type <code class="language-plaintext highlighter-rouge">which git</code> (Mac, Linux), or <code class="language-plaintext highlighter-rouge">where git</code> (Windows).
Copy the path to the git executable.</p>

  <p>e.g. On one Windows computer which had GitHub Desktop installed on it, the path was:
<code class="language-plaintext highlighter-rouge">C:/Users/UserName/AppData/Local/GitHubDesktop/app-1.1.1/resources/app/git/cmd/git.exe</code></p>

  <p>NOTE: The path on your computer will be somewhat different.</p>
  <h3 id="tell-rstudio-where-to-find-github">Tell RStudio where to find GitHub</h3>
  <p>In RStudio, go to the <code class="language-plaintext highlighter-rouge">Tools</code> menu &gt; <code class="language-plaintext highlighter-rouge">Global Options</code> &gt; <code class="language-plaintext highlighter-rouge">Git/SVN</code> and then
browse to the git executable you found in the command prompt or shell. Now restart
RStudio.
Note: Even if you have Git installed, you may need
to accept the XCode license if you are using macOS.</p>
</blockquote>

<p>Next, RStudio will ask which existing directory we want to use. Click
‚ÄúBrowse‚Ä¶‚Äù and navigate to the correct directory, then click ‚ÄúCreate Project‚Äù:</p>

<p><img src="../fig/RStudio_screenshot_navigateexisting.png" alt="" /></p>

<p>Ta-da! We have created a new project in RStudio within the existing planets
repository. Notice the vertical ‚ÄúGit‚Äù menu in the menu bar. RStudio has
recognized that the current directory is a Git repository, and gives us a
number of tools to use Git:</p>

<p><img src="../fig/RStudio_screenshot_afterclone.png" alt="" /></p>

<p>To edit the existing files in the repository, we can click on them in the
‚ÄúFiles‚Äù panel on the lower right. Now let‚Äôs add some additional information
about Pluto:</p>

<p><img src="../fig/RStudio_screenshot_editfiles.png" alt="" /></p>

<p>Once we have saved our edited files, we can use RStudio to commit the changes
by clicking on ‚ÄúCommit‚Ä¶‚Äù in the Git menu:</p>

<p><img src="../fig/RStudio_screenshot_commit.png" alt="" /></p>

<p>This will open a dialogue where we can select which files to commit (by
checking the appropriate boxes in the ‚ÄúStaged‚Äù column), and enter a commit
message (in the upper right panel). The icons in the ‚ÄúStatus‚Äù column indicate
the current status of each file. Clicking on a file shows information about
changes in the lower panel (using output of <code class="language-plaintext highlighter-rouge">git diff</code>). Once everything is the
way we want it, we click ‚ÄúCommit‚Äù:</p>

<p><img src="../fig/RStudio_screenshot_review.png" alt="" /></p>

<p>The changes can be pushed by selecting ‚ÄúPush Branch‚Äù from the Git menu. There
are also options to pull from the remote repository, and to view the commit
history:</p>

<p><img src="../fig/RStudio_screenshot_history.png" alt="" /></p>

<blockquote class="callout">
  <h2 id="are-the-pushpull-commands-grayed-out">Are the Push/Pull Commands Grayed Out?</h2>

  <p>Grayed out Push/Pull commands generally mean that RStudio doesn‚Äôt know the
location of your remote repository (e.g. on GitHub). To fix this, open a
terminal to the repository and enter the command: <code class="language-plaintext highlighter-rouge">git push -u origin
master</code>. Then restart RStudio.</p>
</blockquote>

<p>If we click on ‚ÄúHistory‚Äù, we can see a graphical version of what <code class="language-plaintext highlighter-rouge">git log</code>
would tell us:</p>

<p><img src="../fig/RStudio_screenshot_viewhistory.png" alt="" /></p>

<p>RStudio creates a number of files that it uses to keep track of a project. We
often don‚Äôt want to track these, in which case we add them to our <code class="language-plaintext highlighter-rouge">.gitignore</code>
file:</p>

<p><img src="../fig/RStudio_screenshot_gitignore.png" alt="" /></p>

<blockquote class="callout">
  <h2 id="tip-versioning-disposable-output">Tip: versioning disposable output</h2>

  <p>Generally you do not want to version control disposable output (or read-only
data). You should modify the <code class="language-plaintext highlighter-rouge">.gitignore</code> file to tell Git to ignore these
files and directories.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="challenge">Challenge</h2>

  <ol>
    <li>Create a new directory within your project called <code class="language-plaintext highlighter-rouge">graphs</code>.</li>
    <li>Modify the <code class="language-plaintext highlighter-rouge">.gitignore</code> so that the <code class="language-plaintext highlighter-rouge">graphs</code> directory is not version controlled.</li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-to-challenge">Solution to Challenge</h2>

    <p>This can be done in Rstudio:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dir.create("./graphs")
</code></pre></div>    </div>
    <p>Then open up the <code class="language-plaintext highlighter-rouge">.gitignore</code> file from the righ-hand panel of Rstudio and add 
<code class="language-plaintext highlighter-rouge">graphs/</code> to the list of files to ignore.</p>
  </blockquote>
</blockquote>

<p>There are many more features in the RStudio Git menu, but these should be
enough to get you started!</p>

:ET