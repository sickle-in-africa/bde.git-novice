I"çB<p>Version control really comes into its own when we begin to collaborate with
other people.  We already have most of the machinery we need to do this; the
only thing missing is to copy changes from one repository to another.</p>

<p>Systems like Git allow us to move work between any two repositories.  In
practice, though, it‚Äôs easiest to use one copy as a central hub, and to keep it
on the web rather than on someone‚Äôs laptop.  Most programmers use hosting
services like <a href="https://github.com">GitHub</a>, <a href="https://bitbucket.org">Bitbucket</a> or
<a href="https://gitlab.com/">GitLab</a> to hold those master copies; we‚Äôll explore the pros
and cons of this in the final section of this lesson.</p>

<p>Let‚Äôs start by sharing the changes we‚Äôve made to our current project with the
world.  Log in to GitHub, then click on the icon in the top right corner to
create a new repository called <code class="language-plaintext highlighter-rouge">planets</code>:</p>

<p><img src="../fig/github-create-repo-01.png" alt="Creating a Repository on GitHub (Step 1)" /></p>

<p>Name your repository ‚Äúplanets‚Äù and then click ‚ÄúCreate Repository‚Äù.</p>

<p>Note: Since this repository will be connected to a local repository, it needs to be empty. Leave 
‚ÄúInitialize this repository with a README‚Äù unchecked, and keep ‚ÄúNone‚Äù as options for both ‚ÄúAdd 
.gitignore‚Äù and ‚ÄúAdd a license.‚Äù See the ‚ÄúGitHub License and README files‚Äù exercise below for a full 
explanation of why the repository needs to be empty.</p>

<p><img src="../fig/github-create-repo-02.png" alt="Creating a Repository on GitHub (Step 2)" /></p>

<p>As soon as the repository is created, GitHub displays a page with a URL and some
information on how to configure your local repository:</p>

<p><img src="../fig/github-create-repo-03.png" alt="Creating a Repository on GitHub (Step 3)" /></p>

<p>This effectively does the following on GitHub‚Äôs servers:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">mkdir </span>planets
<span class="nv">$ </span><span class="nb">cd </span>planets
<span class="nv">$ </span>git init
</code></pre></div></div>

<p>If you remember back to the earlier <a href="../04-changes/">lesson</a> where we added and
committed our earlier work on <code class="language-plaintext highlighter-rouge">mars.txt</code>, we had a diagram of the local repository
which looked like this:</p>

<p><img src="../fig/git-staging-area.svg" alt="The Local Repository with Git Staging Area" /></p>

<p>Now that we have two repositories, we need a diagram like this:</p>

<p><img src="../fig/git-freshly-made-github-repo.svg" alt="Freshly-Made GitHub Repository" /></p>

<p>Note that our local repository still contains our earlier work on <code class="language-plaintext highlighter-rouge">mars.txt</code>, but the
remote repository on GitHub appears empty as it doesn‚Äôt contain any files yet.</p>

<p>The next step is to connect the two repositories.  We do this by making the
GitHub repository a <a href="../reference.html#remote">remote</a> for the local repository.
The home page of the repository on GitHub includes the string we need to
identify it:</p>

<p><img src="../fig/github-find-repo-string.png" alt="Where to Find Repository URL on GitHub" /></p>

<p>Click on the ‚ÄòHTTPS‚Äô link to change the <a href="../reference.html#protocol">protocol</a> from SSH to HTTPS.</p>

<blockquote class="callout">
  <h2 id="https-vs-ssh">HTTPS vs. SSH</h2>

  <p>We use HTTPS here because it does not require additional configuration.  After
the workshop you may want to set up SSH access, which is a bit more secure, by
following one of the great tutorials from
<a href="https://help.github.com/articles/generating-ssh-keys">GitHub</a>,
<a href="https://confluence.atlassian.com/bitbucket/set-up-ssh-for-git-728138079.html">Atlassian/Bitbucket</a>
and <a href="https://about.gitlab.com/2014/03/04/add-ssh-key-screencast/">GitLab</a>
(this one has a screencast).</p>
</blockquote>

<p><img src="../fig/github-change-repo-string.png" alt="Changing the Repository URL on GitHub" /></p>

<p>Copy that URL from the browser, go into the local <code class="language-plaintext highlighter-rouge">planets</code> repository, and run
this command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git remote add origin https://github.com/vlad/planets.git
</code></pre></div></div>

<p>Make sure to use the URL for your repository rather than Vlad‚Äôs: the only
difference should be your username instead of <code class="language-plaintext highlighter-rouge">vlad</code>.</p>

<p><code class="language-plaintext highlighter-rouge">origin</code> is a local name used to refer to the remote repository. It could be called
anything, but <code class="language-plaintext highlighter-rouge">origin</code> is a convention that is often used by default in git
and GitHub, so it‚Äôs helpful to stick with this unless there‚Äôs a reason not to.</p>

<p>We can check that the command has worked by running <code class="language-plaintext highlighter-rouge">git remote -v</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git remote <span class="nt">-v</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>origin   https://github.com/vlad/planets.git (push)
origin   https://github.com/vlad/planets.git (fetch)
</code></pre></div></div>

<p>We‚Äôll discuss remotes in more detail in the next episode, while
talking about how they might be used for collaboration.</p>

<p>Once the remote is set up, this command will push the changes from
our local repository to the repository on GitHub:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git push origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enumerating objects: 16, done.
Counting objects: 100% (16/16), done.
Delta compression using up to 8 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (16/16), 1.45 KiB | 372.00 KiB/s, done.
Total 16 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), done.
To https://github.com/vlad/planets.git
 * [new branch]      master -&gt; master
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="proxy">Proxy</h2>

  <p>If the network you are connected to uses a proxy, there is a chance that your
last command failed with ‚ÄúCould not resolve hostname‚Äù as the error message. To
solve this issue, you need to tell Git about the proxy:</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config <span class="nt">--global</span> http.proxy http://user:password@proxy.url
<span class="nv">$ </span>git config <span class="nt">--global</span> https.proxy http://user:password@proxy.url
</code></pre></div>  </div>

  <p>When you connect to another network that doesn‚Äôt use a proxy, you will need to
tell Git to disable the proxy using:</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config <span class="nt">--global</span> <span class="nt">--unset</span> http.proxy
<span class="nv">$ </span>git config <span class="nt">--global</span> <span class="nt">--unset</span> https.proxy
</code></pre></div>  </div>
</blockquote>

<blockquote class="callout">
  <h2 id="password-managers">Password Managers</h2>

  <p>If your operating system has a password manager configured, <code class="language-plaintext highlighter-rouge">git push</code> will
try to use it when it needs your username and password.  For example, this
is the default behavior for Git Bash on Windows. If you want to type your
username and password at the terminal instead of using a password manager,
type:</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">unset </span>SSH_ASKPASS
</code></pre></div>  </div>

  <p>in the terminal, before you run <code class="language-plaintext highlighter-rouge">git push</code>.  Despite the name, <a href="https://git-scm.com/docs/gitcredentials#_requesting_credentials">Git uses
<code class="language-plaintext highlighter-rouge">SSH_ASKPASS</code> for all credential
entry</a>, so
you may want to unset <code class="language-plaintext highlighter-rouge">SSH_ASKPASS</code> whether you are using Git via SSH or
https.</p>

  <p>You may also want to add <code class="language-plaintext highlighter-rouge">unset SSH_ASKPASS</code> at the end of your <code class="language-plaintext highlighter-rouge">~/.bashrc</code>
to make Git default to using the terminal for usernames and passwords.</p>
</blockquote>

<p>Our local and remote repositories are now in this state:</p>

<p><img src="../fig/github-repo-after-first-push.svg" alt="GitHub Repository After First Push" /></p>

<blockquote class="callout">
  <h2 id="the--u-flag">The ‚Äò-u‚Äô Flag</h2>

  <p>You may see a <code class="language-plaintext highlighter-rouge">-u</code> option used with <code class="language-plaintext highlighter-rouge">git push</code> in some documentation.  This
option is synonymous with the <code class="language-plaintext highlighter-rouge">--set-upstream-to</code> option for the <code class="language-plaintext highlighter-rouge">git branch</code>
command, and is used to associate the current branch with a remote branch so
that the <code class="language-plaintext highlighter-rouge">git pull</code> command can be used without any arguments. To do this,
simply use <code class="language-plaintext highlighter-rouge">git push -u origin master</code> once the remote has been set up.</p>
</blockquote>

<p>We can pull changes from the remote repository to the local one as well:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>From https://github.com/vlad/planets
 * branch            master     -&gt; FETCH_HEAD
Already up-to-date.
</code></pre></div></div>

<p>Pulling has no effect in this case because the two repositories are already
synchronized.  If someone else had pushed some changes to the repository on
GitHub, though, this command would download them to our local repository.</p>

<blockquote class="challenge">
  <h2 id="github-gui">GitHub GUI</h2>

  <p>Browse to your <code class="language-plaintext highlighter-rouge">planets</code> repository on GitHub.
Under the Code tab, find and click on the text that says ‚ÄúXX commits‚Äù (where ‚ÄúXX‚Äù is some number).
Hover over, and click on, the three buttons to the right of each commit.
What information can you gather/explore from these buttons?
How would you get that same information in the shell?</p>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>
    <p>The left-most button (with the picture of a clipboard) copies the full identifier of the commit 
to the clipboard. In the shell, <code class="language-plaintext highlighter-rouge">git log</code> will show you the full commit identifier for each 
commit.</p>

    <p>When you click on the middle button, you‚Äôll see all of the changes that were made in that 
particular commit. Green shaded lines indicate additions and red ones removals. In the shell we 
can do the same thing with <code class="language-plaintext highlighter-rouge">git diff</code>. In particular, <code class="language-plaintext highlighter-rouge">git diff ID1..ID2</code> where ID1 and 
ID2 are commit identifiers (e.g. <code class="language-plaintext highlighter-rouge">git diff a3bf1e5..041e637</code>) will show the differences 
between those two commits.</p>

    <p>The right-most button lets you view all of the files in the repository at the time of that 
commit. To do this in the shell, we‚Äôd need to checkout the repository at that particular time. 
We can do this with <code class="language-plaintext highlighter-rouge">git checkout ID</code> where ID is the identifier of the commit we want to 
look at. If we do this, we need to remember to put the repository back to the right state 
afterwards!</p>
  </blockquote>
</blockquote>

<blockquote class="callout">
  <h2 id="uploading-files-directly-in-github-browser">Uploading files directly in GitHub browser</h2>

  <p>Github also allows you to skip the command line and upload files directly to 
your repository without having to leave the browser. There are two options. 
First you can click the ‚ÄúUpload files‚Äù button in the toolbar at the top of the
file tree. Or, you can drag and drop files from your desktop onto the file 
tree. You can read more about this <a href="https://help.github.com/articles/adding-a-file-to-a-repository/">on this GitHub page</a></p>
</blockquote>

<blockquote class="challenge">
  <h2 id="github-timestamp">GitHub Timestamp</h2>

  <p>Create a remote repository on GitHub. Push the contents of your local
repository to the remote. Make changes to your local repository and push these
changes. Go to the repo you just created on GitHub and check the
<a href="../reference.html#timestamp">timestamps</a> of the files. How does GitHub
record times, and why?</p>

  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>
    <p>GitHub displays timestamps in a human readable relative format (i.e. ‚Äú22 hours ago‚Äù or ‚Äúthree 
weeks ago‚Äù). However, if you hover over the timestamp, you can see the exact time at which the 
last change to the file occurred.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="push-vs-commit">Push vs. Commit</h2>

  <p>In this lesson, we introduced the ‚Äúgit push‚Äù command.
How is ‚Äúgit push‚Äù different from ‚Äúgit commit‚Äù?</p>

  <blockquote class="solution">
    <h2 id="solution-2">Solution</h2>
    <p>When we push changes, we‚Äôre interacting with a remote repository to update it with the changes 
we‚Äôve made locally (often this corresponds to sharing the changes we‚Äôve made with others). 
Commit only updates your local repository.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="github-license-and-readme-files">GitHub License and README files</h2>

  <p>In this section we learned about creating a remote repository on GitHub, but when you initialized 
your GitHub repo, you didn‚Äôt add a README.md or a license file. If you had, what do you think 
would have happened when you tried to link your local and remote repositories?</p>

  <blockquote class="solution">
    <h2 id="solution-3">Solution</h2>
    <p>In this case, we‚Äôd see a merge conflict due to unrelated histories. When GitHub creates a 
README.md file, it performs a commit in the remote repository. When you try to pull the remote 
repository to your local repository, Git detects that they have histories that do not share a 
common origin and refuses to merge.</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull origin master
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>warning: no common commits
remote: Enumerating objects: 3, done.
remote: Counting objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/vlad/planets
 * branch            master     -&gt; FETCH_HEAD
 * [new branch]      master     -&gt; origin/master
fatal: refusing to merge unrelated histories
</code></pre></div>    </div>

    <p>You can force git to merge the two repositories with the option <code class="language-plaintext highlighter-rouge">--allow-unrelated-histories</code>. 
Be careful when you use this option and carefully examine the contents of local and remote 
repositories before merging.</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull <span class="nt">--allow-unrelated-histories</span> origin master
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>From https://github.com/vlad/planets
 * branch            master     -&gt; FETCH_HEAD
Merge made by the 'recursive' strategy.
README.md | 1 +
1 file changed, 1 insertion(+)
create mode 100644 README.md
</code></pre></div>    </div>

  </blockquote>
</blockquote>
:ET