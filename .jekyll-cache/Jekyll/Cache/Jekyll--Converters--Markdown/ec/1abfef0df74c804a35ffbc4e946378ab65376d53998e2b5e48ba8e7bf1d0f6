I"#e<p>As soon as people can work in parallel, they’ll likely step on each other’s
toes.  This will even happen with a single person: if we are working on
a piece of software on both our laptop and a server in the lab, we could make
different changes to each copy.  Version control helps us manage these
<a href="../reference.html#conflict">conflicts</a> by giving us tools to
<a href="../reference.html#resolve">resolve</a> overlapping changes.</p>

<p>To see how we can resolve conflicts, we must first create one.  The file
<code class="language-plaintext highlighter-rouge">mars.txt</code> currently looks like this in both partners’ copies of our <code class="language-plaintext highlighter-rouge">planets</code>
repository:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
</code></pre></div></div>

<p>Let’s add a line to the collaborator’s copy only:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano mars.txt
<span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
This line added to Wolfman's copy
</code></pre></div></div>

<p>and then push the change to GitHub:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add mars.txt
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Add a line in our home copy"</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master 5ae9631] Add a line in our home copy
 1 file changed, 1 insertion(+)
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git push origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 331 bytes | 331.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
To https://github.com/vlad/planets.git
   29aba7c..dabb4c8  master -&gt; master
</code></pre></div></div>

<p>Now let’s have the owner
make a different change to their copy
<em>without</em> updating from GitHub:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano mars.txt
<span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
We added a different line in the other copy
</code></pre></div></div>

<p>We can commit the change locally:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add mars.txt
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Add a line in my copy"</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master 07ebc69] Add a line in my copy
 1 file changed, 1 insertion(+)
</code></pre></div></div>

<p>but Git won’t let us push it to GitHub:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git push origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>To https://github.com/vlad/planets.git
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'https://github.com/vlad/planets.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre></div></div>

<p><img src="../fig/conflict.svg" alt="The Conflicting Changes" /></p>

<p>Git rejects the push because it detects that the remote repository has new updates that have not been
incorporated into the local branch.
What we have to do is pull the changes from GitHub,
<a href="../reference.html#merge">merge</a> them into the copy we’re currently working in, and then push that.
Let’s start by pulling:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (1/1), done.
remote: Total 3 (delta 2), reused 3 (delta 2), pack-reused 0
Unpacking objects: 100% (3/3), done.
From https://github.com/vlad/planets
 * branch            master     -&gt; FETCH_HEAD
    29aba7c..dabb4c8  master     -&gt; origin/master
Auto-merging mars.txt
CONFLICT (content): Merge conflict in mars.txt
Automatic merge failed; fix conflicts and then commit the result.
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">git pull</code> command updates the local repository to include those
changes already included in the remote repository.
After the changes from remote branch have been fetched, Git detects that changes made to the local copy 
overlap with those made to the remote repository, and therefore refuses to merge the two versions to
stop us from trampling on our previous work. The conflict is marked in
in the affected file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
We added a different line in the other copy
=======
This line added to Wolfman's copy
&gt;&gt;&gt;&gt;&gt;&gt;&gt; dabb4c8c450e8475aee9b14b4383acc99f42af1d
</code></pre></div></div>

<p>Our change is preceded by <code class="language-plaintext highlighter-rouge">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>.
Git has then inserted <code class="language-plaintext highlighter-rouge">=======</code> as a separator between the conflicting changes
and marked the end of the content downloaded from GitHub with <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>.
(The string of letters and digits after that marker
identifies the commit we’ve just downloaded.)</p>

<p>It is now up to us to edit this file to remove these markers
and reconcile the changes.
We can do anything we want: keep the change made in the local repository, keep
the change made in the remote repository, write something new to replace both,
or get rid of the change entirely.
Let’s replace both so that the file looks like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
We removed the conflict on this line
</code></pre></div></div>

<p>To finish merging,
we add <code class="language-plaintext highlighter-rouge">mars.txt</code> to the changes being made by the merge
and then commit:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add mars.txt
<span class="nv">$ </span>git status
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

	modified:   mars.txt

</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Merge changes from GitHub"</span>
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master 2abf2b1] Merge changes from GitHub
</code></pre></div></div>

<p>Now we can push our changes to GitHub:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git push origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Enumerating objects: 10, done.
Counting objects: 100% (10/10), done.
Delta compression using up to 8 threads
Compressing objects: 100% (6/6), done.
Writing objects: 100% (6/6), 645 bytes | 645.00 KiB/s, done.
Total 6 (delta 4), reused 0 (delta 0)
remote: Resolving deltas: 100% (4/4), completed with 2 local objects.
To https://github.com/vlad/planets.git
   dabb4c8..2abf2b1  master -&gt; master
</code></pre></div></div>

<p>Git keeps track of what we’ve merged with what,
so we don’t have to fix things by hand again
when the collaborator who made the first change pulls again:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull origin master
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>remote: Enumerating objects: 10, done.
remote: Counting objects: 100% (10/10), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 6 (delta 4), reused 6 (delta 4), pack-reused 0
Unpacking objects: 100% (6/6), done.
From https://github.com/vlad/planets
 * branch            master     -&gt; FETCH_HEAD
    dabb4c8..2abf2b1  master     -&gt; origin/master
Updating dabb4c8..2abf2b1
Fast-forward
 mars.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
</code></pre></div></div>

<p>We get the merged file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
We removed the conflict on this line
</code></pre></div></div>

<p>We don’t need to merge again because Git knows someone has already done that.</p>

<p>Git’s ability to resolve conflicts is very useful, but conflict resolution
costs time and effort, and can introduce errors if conflicts are not resolved
correctly. If you find yourself resolving a lot of conflicts in a project,
consider these technical approaches to reducing them:</p>

<ul>
  <li>Pull from upstream more frequently, especially before starting new work</li>
  <li>Use topic branches to segregate work, merging to master when complete</li>
  <li>Make smaller more atomic commits</li>
  <li>Where logically appropriate, break large files into smaller ones so that it is
less likely that two authors will alter the same file simultaneously</li>
</ul>

<p>Conflicts can also be minimized with project management strategies:</p>

<ul>
  <li>Clarify who is responsible for what areas with your collaborators</li>
  <li>Discuss what order tasks should be carried out in with your collaborators so
that tasks expected to change the same lines won’t be worked on simultaneously</li>
  <li>If the conflicts are stylistic churn (e.g. tabs vs. spaces), establish a
project convention that is governing and use code style tools (e.g.
<code class="language-plaintext highlighter-rouge">htmltidy</code>, <code class="language-plaintext highlighter-rouge">perltidy</code>, <code class="language-plaintext highlighter-rouge">rubocop</code>, etc.) to enforce, if necessary</li>
</ul>

<blockquote class="challenge">
  <h2 id="solving-conflicts-that-you-create">Solving Conflicts that You Create</h2>

  <p>Clone the repository created by your instructor.
Add a new file to it,
and modify an existing file (your instructor will tell you which one).
When asked by your instructor,
pull her changes from the repository to create a conflict,
then resolve it.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="conflicts-on-non-textual-files">Conflicts on Non-textual files</h2>

  <p>What does Git do
when there is a conflict in an image or some other non-textual file
that is stored in version control?</p>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <p>Let’s try it. Suppose Dracula takes a picture of Martian surface and
calls it <code class="language-plaintext highlighter-rouge">mars.jpg</code>.</p>

    <p>If you do not have an image file of Mars available, you can create
a dummy binary file like this:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">head</span> <span class="nt">-c</span> 1024 /dev/urandom <span class="o">&gt;</span> mars.jpg
<span class="nv">$ </span><span class="nb">ls</span> <span class="nt">-lh</span> mars.jpg
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-rw-r--r-- 1 vlad 57095 1.0K Mar  8 20:24 mars.jpg
</code></pre></div>    </div>

    <p><code class="language-plaintext highlighter-rouge">ls</code> shows us that this created a 1-kilobyte file. It is full of
random bytes read from the special file, <code class="language-plaintext highlighter-rouge">/dev/urandom</code>.</p>

    <p>Now, suppose Dracula adds <code class="language-plaintext highlighter-rouge">mars.jpg</code> to his repository:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add mars.jpg
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Add picture of Martian surface"</span>
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master 8e4115c] Add picture of Martian surface
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 mars.jpg
</code></pre></div>    </div>

    <p>Suppose that Wolfman has added a similar picture in the meantime.
His is a picture of the Martian sky, but it is <em>also</em> called <code class="language-plaintext highlighter-rouge">mars.jpg</code>.
When Dracula tries to push, he gets a familiar message:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git push origin master
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>To https://github.com/vlad/planets.git
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'https://github.com/vlad/planets.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre></div>    </div>

    <p>We’ve learned that we must pull first and resolve any conflicts:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull origin master
</code></pre></div>    </div>

    <p>When there is a conflict on an image or other binary file, git prints
a message like this:</p>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git pull origin master
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/vlad/planets.git
 * branch            master     -&gt; FETCH_HEAD
   6a67967..439dc8c  master     -&gt; origin/master
warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)
Auto-merging mars.jpg
CONFLICT (add/add): Merge conflict in mars.jpg
Automatic merge failed; fix conflicts and then commit the result.
</code></pre></div>    </div>

    <p>The conflict message here is mostly the same as it was for <code class="language-plaintext highlighter-rouge">mars.txt</code>, but
there is one key additional line:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>warning: Cannot merge binary files: mars.jpg (HEAD vs. 439dc8c08869c342438f6dc4a2b615b05b93c76e)
</code></pre></div>    </div>

    <p>Git cannot automatically insert conflict markers into an image as it does
for text files. So, instead of editing the image file, we must check out
the version we want to keep. Then we can add and commit this version.</p>

    <p>On the key line above, Git has conveniently given us commit identifiers
for the two versions of <code class="language-plaintext highlighter-rouge">mars.jpg</code>. Our version is <code class="language-plaintext highlighter-rouge">HEAD</code>, and Wolfman’s
version is <code class="language-plaintext highlighter-rouge">439dc8c0...</code>. If we want to use our version, we can use
<code class="language-plaintext highlighter-rouge">git checkout</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout HEAD mars.jpg
<span class="nv">$ </span>git add mars.jpg
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Use image of surface instead of sky"</span>
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master 21032c3] Use image of surface instead of sky
</code></pre></div>    </div>

    <p>If instead we want to use Wolfman’s version, we can use <code class="language-plaintext highlighter-rouge">git checkout</code> with
Wolfman’s commit identifier, <code class="language-plaintext highlighter-rouge">439dc8c0</code>:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout 439dc8c0 mars.jpg
<span class="nv">$ </span>git add mars.jpg
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Use image of sky instead of surface"</span>
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master da21b34] Use image of sky instead of surface
</code></pre></div>    </div>

    <p>We can also keep <em>both</em> images. The catch is that we cannot keep them
under the same name. But, we can check out each version in succession
and <em>rename</em> it, then add the renamed versions. First, check out each
image and rename it:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout HEAD mars.jpg
<span class="nv">$ </span>git <span class="nb">mv </span>mars.jpg mars-surface.jpg
<span class="nv">$ </span>git checkout 439dc8c0 mars.jpg
<span class="nv">$ </span><span class="nb">mv </span>mars.jpg mars-sky.jpg
</code></pre></div>    </div>

    <p>Then, remove the old <code class="language-plaintext highlighter-rouge">mars.jpg</code> and add the two new files:</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git <span class="nb">rm </span>mars.jpg
<span class="nv">$ </span>git add mars-surface.jpg
<span class="nv">$ </span>git add mars-sky.jpg
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Use two images: surface and sky"</span>
</code></pre></div>    </div>

    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[master 94ae08c] Use two images: surface and sky
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 mars-sky.jpg
 rename mars.jpg =&gt; mars-surface.jpg (100%)
</code></pre></div>    </div>

    <p>Now both images of Mars are checked into the repository, and <code class="language-plaintext highlighter-rouge">mars.jpg</code>
no longer exists.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="a-typical-work-session">A Typical Work Session</h2>

  <p>You sit down at your computer to work on a shared project that is tracked in a
remote Git repository. During your work session, you take the following
actions, but not in this order:</p>

  <ul>
    <li><em>Make changes</em> by appending the number <code class="language-plaintext highlighter-rouge">100</code> to a text file <code class="language-plaintext highlighter-rouge">numbers.txt</code></li>
    <li><em>Update remote</em> repository to match the local repository</li>
    <li><em>Celebrate</em> your success with some fancy beverage(s)</li>
    <li><em>Update local</em> repository to match the remote repository</li>
    <li><em>Stage changes</em> to be committed</li>
    <li><em>Commit changes</em> to the local repository</li>
  </ul>

  <p>In what order should you perform these actions to minimize the chances of
conflicts? Put the commands above in order in the <em>action</em> column of the table
below. When you have the order right, see if you can write the corresponding
commands in the <em>command</em> column. A few steps are populated to get you
started.</p>

  <table>
    <thead>
      <tr>
        <th>order</th>
        <th>action . . . . . . . . . .</th>
        <th>command . . . . . . . . . .</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>1</td>
        <td> </td>
        <td> </td>
      </tr>
      <tr>
        <td>2</td>
        <td> </td>
        <td><code class="language-plaintext highlighter-rouge">echo 100 &gt;&gt; numbers.txt</code></td>
      </tr>
      <tr>
        <td>3</td>
        <td> </td>
        <td> </td>
      </tr>
      <tr>
        <td>4</td>
        <td> </td>
        <td> </td>
      </tr>
      <tr>
        <td>5</td>
        <td> </td>
        <td> </td>
      </tr>
      <tr>
        <td>6</td>
        <td>Celebrate!</td>
        <td><code class="language-plaintext highlighter-rouge">AFK</code></td>
      </tr>
    </tbody>
  </table>

  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>

    <table>
      <thead>
        <tr>
          <th>order</th>
          <th>action . . . . . .</th>
          <th>command . . . . . . . . . . . . . . . . . . .</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>1</td>
          <td>Update local</td>
          <td><code class="language-plaintext highlighter-rouge">git pull origin master</code></td>
        </tr>
        <tr>
          <td>2</td>
          <td>Make changes</td>
          <td><code class="language-plaintext highlighter-rouge">echo 100 &gt;&gt; numbers.txt</code></td>
        </tr>
        <tr>
          <td>3</td>
          <td>Stage changes</td>
          <td><code class="language-plaintext highlighter-rouge">git add numbers.txt</code></td>
        </tr>
        <tr>
          <td>4</td>
          <td>Commit changes</td>
          <td><code class="language-plaintext highlighter-rouge">git commit -m "Add 100 to numbers.txt"</code></td>
        </tr>
        <tr>
          <td>5</td>
          <td>Update remote</td>
          <td><code class="language-plaintext highlighter-rouge">git push origin master</code></td>
        </tr>
        <tr>
          <td>6</td>
          <td>Celebrate!</td>
          <td><code class="language-plaintext highlighter-rouge">AFK</code></td>
        </tr>
      </tbody>
    </table>

  </blockquote>
</blockquote>
:ET