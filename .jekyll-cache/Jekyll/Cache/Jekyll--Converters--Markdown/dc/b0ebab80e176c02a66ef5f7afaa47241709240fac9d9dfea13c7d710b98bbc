I"e<p>As we saw in the previous lesson, we can refer to commits by their
identifiers.  You can refer to the <em>most recent commit</em> of the working
directory by using the identifier <code class="language-plaintext highlighter-rouge">HEAD</code>.</p>

<p>We’ve been adding one line at a time to <code class="language-plaintext highlighter-rouge">mars.txt</code>, so it’s easy to track our
progress by looking, so let’s do that using our <code class="language-plaintext highlighter-rouge">HEAD</code>s.  Before we start,
let’s make a change to <code class="language-plaintext highlighter-rouge">mars.txt</code>, adding yet another line.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>nano mars.txt
<span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
An ill-considered change
</code></pre></div></div>

<p>Now, let’s see what we get.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git diff HEAD mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff --git a/mars.txt b/mars.txt
index b36abfd..0848c8d 100644
--- a/mars.txt
+++ b/mars.txt
@@ -1,3 +1,4 @@
 Cold and dry, but everything is my favorite color
 The two moons may be a problem for Wolfman
 But the Mummy will appreciate the lack of humidity
+An ill-considered change.
</code></pre></div></div>

<p>which is the same as what you would get if you leave out <code class="language-plaintext highlighter-rouge">HEAD</code> (try it).  The
real goodness in all this is when you can refer to previous commits.  We do
that by adding <code class="language-plaintext highlighter-rouge">~1</code> 
(where “~” is “tilde”, pronounced [<strong>til</strong>-d<em>uh</em>]) 
to refer to the commit one before <code class="language-plaintext highlighter-rouge">HEAD</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git diff HEAD~1 mars.txt
</code></pre></div></div>

<p>If we want to see the differences between older commits we can use <code class="language-plaintext highlighter-rouge">git diff</code>
again, but with the notation <code class="language-plaintext highlighter-rouge">HEAD~1</code>, <code class="language-plaintext highlighter-rouge">HEAD~2</code>, and so on, to refer to them:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git diff HEAD~3 mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff --git a/mars.txt b/mars.txt
index df0654a..b36abfd 100644
--- a/mars.txt
+++ b/mars.txt
@@ -1 +1,4 @@
 Cold and dry, but everything is my favorite color
+The two moons may be a problem for Wolfman
+But the Mummy will appreciate the lack of humidity
+An ill-considered change
</code></pre></div></div>

<p>We could also use <code class="language-plaintext highlighter-rouge">git show</code> which shows us what changes we made at an older commit as 
well as the commit message, rather than the <em>differences</em> between a commit and our 
working directory that we see by using <code class="language-plaintext highlighter-rouge">git diff</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git show HEAD~3 mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit f22b25e3233b4645dabd0d81e651fe074bd8e73b
Author: Vlad Dracula &lt;vlad@tran.sylvan.ia&gt;
Date:   Thu Aug 22 09:51:46 2013 -0400

    Start notes on Mars as a base

diff --git a/mars.txt b/mars.txt
new file mode 100644
index 0000000..df0654a
--- /dev/null
+++ b/mars.txt
@@ -0,0 +1 @@
+Cold and dry, but everything is my favorite color
</code></pre></div></div>

<p>In this way,
we can build up a chain of commits.
The most recent end of the chain is referred to as <code class="language-plaintext highlighter-rouge">HEAD</code>;
we can refer to previous commits using the <code class="language-plaintext highlighter-rouge">~</code> notation,
so <code class="language-plaintext highlighter-rouge">HEAD~1</code>
means “the previous commit”,
while <code class="language-plaintext highlighter-rouge">HEAD~123</code> goes back 123 commits from where we are now.</p>

<p>We can also refer to commits using
those long strings of digits and letters
that <code class="language-plaintext highlighter-rouge">git log</code> displays.
These are unique IDs for the changes,
and “unique” really does mean unique:
every change to any set of files on any computer
has a unique 40-character identifier.
Our first commit was given the ID
<code class="language-plaintext highlighter-rouge">f22b25e3233b4645dabd0d81e651fe074bd8e73b</code>,
so let’s try this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git diff f22b25e3233b4645dabd0d81e651fe074bd8e73b mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff --git a/mars.txt b/mars.txt
index df0654a..93a3e13 100644
--- a/mars.txt
+++ b/mars.txt
@@ -1 +1,4 @@
 Cold and dry, but everything is my favorite color
+The two moons may be a problem for Wolfman
+But the Mummy will appreciate the lack of humidity
+An ill-considered change
</code></pre></div></div>

<p>That’s the right answer,
but typing out random 40-character strings is annoying,
so Git lets us use just the first few characters (typically seven for normal size projects):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git diff f22b25e mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff --git a/mars.txt b/mars.txt
index df0654a..93a3e13 100644
--- a/mars.txt
+++ b/mars.txt
@@ -1 +1,4 @@
 Cold and dry, but everything is my favorite color
+The two moons may be a problem for Wolfman
+But the Mummy will appreciate the lack of humidity
+An ill-considered change
</code></pre></div></div>

<p>All right! So
we can save changes to files and see what we’ve changed. Now, how
can we restore older versions of things?
Let’s suppose we change our mind about the last update to
<code class="language-plaintext highlighter-rouge">mars.txt</code> (the “ill-considered change”).</p>

<p><code class="language-plaintext highlighter-rouge">git status</code> now tells us that the file has been changed,
but those changes haven’t been staged:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

    modified:   mars.txt

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre></div></div>

<p>We can put things back the way they were
by using <code class="language-plaintext highlighter-rouge">git checkout</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout HEAD mars.txt
<span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
The two moons may be a problem for Wolfman
But the Mummy will appreciate the lack of humidity
</code></pre></div></div>

<p>As you might guess from its name,
<code class="language-plaintext highlighter-rouge">git checkout</code> checks out (i.e., restores) an old version of a file.
In this case,
we’re telling Git that we want to recover the version of the file recorded in <code class="language-plaintext highlighter-rouge">HEAD</code>,
which is the last saved commit.
If we want to go back even further,
we can use a commit identifier instead:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout f22b25e mars.txt
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cat </span>mars.txt
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cold and dry, but everything is my favorite color
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git status
</code></pre></div></div>

<div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>On branch master
Changes to be committed:
  (use "git reset HEAD &lt;file&gt;..." to unstage)

    modified:   mars.txt

</code></pre></div></div>

<p>Notice that the changes are currently in the staging area.
Again, we can put things back the way they were
by using <code class="language-plaintext highlighter-rouge">git checkout</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout HEAD mars.txt
</code></pre></div></div>

<blockquote class="callout">
  <h2 id="dont-lose-your-head">Don’t Lose Your HEAD</h2>

  <p>Above we used</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout f22b25e mars.txt
</code></pre></div>  </div>

  <p>to revert <code class="language-plaintext highlighter-rouge">mars.txt</code> to its state after the commit <code class="language-plaintext highlighter-rouge">f22b25e</code>. But be careful! 
The command <code class="language-plaintext highlighter-rouge">checkout</code> has other important functionalities and Git will misunderstand
your intentions if you are not accurate with the typing. For example, 
if you forget <code class="language-plaintext highlighter-rouge">mars.txt</code> in the previous command.</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout f22b25e
</code></pre></div>  </div>
  <div class="language-plaintext error highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Note: checking out 'f22b25e'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:

 git checkout -b &lt;new-branch-name&gt;

HEAD is now at f22b25e Start notes on Mars as a base
</code></pre></div>  </div>

  <p>The “detached HEAD” is like “look, but don’t touch” here,
so you shouldn’t make any changes in this state.
After investigating your repo’s past state, reattach your <code class="language-plaintext highlighter-rouge">HEAD</code> with <code class="language-plaintext highlighter-rouge">git checkout master</code>.</p>
</blockquote>

<p>It’s important to remember that
we must use the commit number that identifies the state of the repository
<em>before</em> the change we’re trying to undo.
A common mistake is to use the number of
the commit in which we made the change we’re trying to discard.
In the example below, we want to retrieve the state from before the most
recent commit (<code class="language-plaintext highlighter-rouge">HEAD~1</code>), which is commit <code class="language-plaintext highlighter-rouge">f22b25e</code>:</p>

<p><img src="../fig/git-checkout.svg" alt="Git Checkout" /></p>

<p>So, to put it all together,
here’s how Git works in cartoon form:</p>

<p><img src="../fig/git_staging.svg" alt="https://figshare.com/articles/How_Git_works_a_cartoon/1328266" /></p>

<blockquote class="callout">
  <h2 id="simplifying-the-common-case">Simplifying the Common Case</h2>

  <p>If you read the output of <code class="language-plaintext highlighter-rouge">git status</code> carefully,
you’ll see that it includes this hint:</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>use <span class="s2">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="k">in </span>working directory<span class="o">)</span>
</code></pre></div>  </div>

  <p>As it says,
<code class="language-plaintext highlighter-rouge">git checkout</code> without a version identifier restores files to the state saved in <code class="language-plaintext highlighter-rouge">HEAD</code>.
The double dash <code class="language-plaintext highlighter-rouge">--</code> is needed to separate the names of the files being recovered
from the command itself:
without it,
Git would try to use the name of the file as the commit identifier.</p>
</blockquote>

<p>The fact that files can be reverted one by one
tends to change the way people organize their work.
If everything is in one large document,
it’s hard (but not impossible) to undo changes to the introduction
without also undoing changes made later to the conclusion.
If the introduction and conclusion are stored in separate files,
on the other hand,
moving backward and forward in time becomes much easier.</p>

<blockquote class="challenge">
  <h2 id="recovering-older-versions-of-a-file">Recovering Older Versions of a File</h2>

  <p>Jennifer has made changes to the Python script that she has been working on for weeks, and the
modifications she made this morning “broke” the script and it no longer runs. She has spent
~ 1hr trying to fix it, with no luck…</p>

  <p>Luckily, she has been keeping track of her project’s versions using Git! Which commands below will
let her recover the last committed version of her Python script called
<code class="language-plaintext highlighter-rouge">data_cruncher.py</code>?</p>

  <ol>
    <li>
      <p><code class="language-plaintext highlighter-rouge">$ git checkout HEAD</code></p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">$ git checkout HEAD data_cruncher.py</code></p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">$ git checkout HEAD~1 data_cruncher.py</code></p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">$ git checkout &lt;unique ID of last commit&gt; data_cruncher.py</code></p>
    </li>
    <li>
      <p>Both 2 and 4</p>
    </li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution">Solution</h2>

    <p>The answer is (5)-Both 2 and 4.</p>

    <p>The <code class="language-plaintext highlighter-rouge">checkout</code> command restores files from the repository, overwriting the files in your working 
directory. Answers 2 and 4 both restore the <em>latest</em> version <em>in the repository</em> of the file 
<code class="language-plaintext highlighter-rouge">data_cruncher.py</code>. Answer 2 uses <code class="language-plaintext highlighter-rouge">HEAD</code> to indicate the <em>latest</em>, whereas answer 4 uses the 
unique ID of the last commit, which is what <code class="language-plaintext highlighter-rouge">HEAD</code> means.</p>

    <p>Answer 3 gets the version of <code class="language-plaintext highlighter-rouge">data_cruncher.py</code> from the commit <em>before</em> <code class="language-plaintext highlighter-rouge">HEAD</code>, which is NOT 
what we wanted.</p>

    <p>Answer 1 can be dangerous! Without a filename, <code class="language-plaintext highlighter-rouge">git checkout</code> will restore <strong>all files</strong> 
in the current directory (and all directories below it) to their state at the commit specified. 
This command will restore <code class="language-plaintext highlighter-rouge">data_cruncher.py</code> to the latest commit version, but it will also 
restore <em>any other files that are changed</em> to that version, erasing any changes you may 
have made to those files!
As discussed above, you are left in a <em>detached</em> <code class="language-plaintext highlighter-rouge">HEAD</code> state, and you don’t want to be there.</p>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="reverting-a-commit">Reverting a Commit</h2>

  <p>Jennifer is collaborating on her Python script with her colleagues and
realizes her last commit to the project’s repository contained an error and
she wants to undo it.  <code class="language-plaintext highlighter-rouge">git revert [erroneous commit ID]</code> will create a new 
commit that reverses Jennifer’s erroneous commit. Therefore <code class="language-plaintext highlighter-rouge">git revert</code> is
different to <code class="language-plaintext highlighter-rouge">git checkout [commit ID]</code> because <code class="language-plaintext highlighter-rouge">git checkout</code> returns the
files within the local repository to a previous state, whereas <code class="language-plaintext highlighter-rouge">git revert</code>
reverses changes committed to the local and project repositories.<br />
Below are the right steps and explanations for Jennifer to use <code class="language-plaintext highlighter-rouge">git revert</code>,
what is the missing command?</p>

  <ol>
    <li>
      <p><code class="language-plaintext highlighter-rouge">________ # Look at the git history of the project to find the commit ID</code></p>
    </li>
    <li>
      <p>Copy the ID (the first few characters of the ID, e.g. 0b1d055).</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">git revert [commit ID]</code></p>
    </li>
    <li>
      <p>Type in the new commit message.</p>
    </li>
    <li>
      <p>Save and close</p>
    </li>
  </ol>
</blockquote>

<blockquote class="challenge">
  <h2 id="understanding-workflow-and-history">Understanding Workflow and History</h2>

  <p>What is the output of the last command in</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>planets
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"Venus is beautiful and full of love"</span> <span class="o">&gt;</span> venus.txt
<span class="nv">$ </span>git add venus.txt
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">"Venus is too hot to be suitable as a base"</span> <span class="o">&gt;&gt;</span> venus.txt
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"Comment on Venus as an unsuitable base"</span>
<span class="nv">$ </span>git checkout HEAD venus.txt
<span class="nv">$ </span><span class="nb">cat </span>venus.txt <span class="c">#this will print the contents of venus.txt to the screen</span>
</code></pre></div>  </div>

  <ol>
    <li>
      <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Venus is too hot to be suitable as a base
</code></pre></div>      </div>
    </li>
    <li>
      <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Venus is beautiful and full of love
</code></pre></div>      </div>
    </li>
    <li>
      <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Venus is beautiful and full of love
Venus is too hot to be suitable as a base
</code></pre></div>      </div>
    </li>
    <li>
      <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error because you have changed venus.txt without committing the changes
</code></pre></div>      </div>
    </li>
  </ol>

  <blockquote class="solution">
    <h2 id="solution-1">Solution</h2>

    <p>The answer is 2.</p>

    <p>The command <code class="language-plaintext highlighter-rouge">git add venus.txt</code> places the current version of <code class="language-plaintext highlighter-rouge">venus.txt</code> into the staging area. 
The changes to the file from the second <code class="language-plaintext highlighter-rouge">echo</code> command are only applied to the working copy, 
not the version in the staging area.</p>

    <p>So, when <code class="language-plaintext highlighter-rouge">git commit -m "Comment on Venus as an unsuitable base"</code> is executed, 
the version of <code class="language-plaintext highlighter-rouge">venus.txt</code> committed to the repository is the one from the staging area and
has only one line.</p>

    <p>At this time, the working copy still has the second line (and 
 <code class="language-plaintext highlighter-rouge">git status</code> will show that the file is modified). However, <code class="language-plaintext highlighter-rouge">git checkout HEAD venus.txt</code> 
 replaces the working copy with the most recently committed version of <code class="language-plaintext highlighter-rouge">venus.txt</code>.</p>

    <p>So, <code class="language-plaintext highlighter-rouge">cat venus.txt</code> will output</p>
    <div class="language-plaintext output highlighter-rouge"><div class="highlight"><pre class="highlight"><code> Venus is beautiful and full of love.
</code></pre></div>    </div>
  </blockquote>
</blockquote>

<blockquote class="challenge">
  <h2 id="checking-understanding-of-git-diff">Checking Understanding of <code class="language-plaintext highlighter-rouge">git diff</code></h2>

  <p>Consider this command: <code class="language-plaintext highlighter-rouge">git diff HEAD~9 mars.txt</code>. What do you predict this command
will do if you execute it? What happens when you do execute it? Why?</p>

  <p>Try another command, <code class="language-plaintext highlighter-rouge">git diff [ID] mars.txt</code>, where [ID] is replaced with
the unique identifier for your most recent commit. What do you think will happen,
and what does happen?</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="getting-rid-of-staged-changes">Getting Rid of Staged Changes</h2>

  <p><code class="language-plaintext highlighter-rouge">git checkout</code> can be used to restore a previous commit when unstaged changes have
been made, but will it also work for changes that have been staged but not committed?
Make a change to <code class="language-plaintext highlighter-rouge">mars.txt</code>, add that change, and use <code class="language-plaintext highlighter-rouge">git checkout</code> to see if
you can remove your change.</p>
</blockquote>

<blockquote class="challenge">
  <h2 id="explore-and-summarize-histories">Explore and Summarize Histories</h2>

  <p>Exploring history is an important part of Git, and often it is a challenge to find
the right commit ID, especially if the commit is from several months ago.</p>

  <p>Imagine the <code class="language-plaintext highlighter-rouge">planets</code> project has more than 50 files.
You would like to find a commit that modifies some specific text in <code class="language-plaintext highlighter-rouge">mars.txt</code>.
When you type <code class="language-plaintext highlighter-rouge">git log</code>, a very long list appeared.
How can you narrow down the search?</p>

  <p>Recall that the <code class="language-plaintext highlighter-rouge">git diff</code> command allows us to explore one specific file,
e.g., <code class="language-plaintext highlighter-rouge">git diff mars.txt</code>. We can apply a similar idea here.</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git log mars.txt
</code></pre></div>  </div>

  <p>Unfortunately some of these commit messages are very ambiguous, e.g., <code class="language-plaintext highlighter-rouge">update files</code>.
How can you search through these files?</p>

  <p>Both <code class="language-plaintext highlighter-rouge">git diff</code> and <code class="language-plaintext highlighter-rouge">git log</code> are very useful and they summarize a different part of the history 
for you.
Is it possible to combine both? Let’s try the following:</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git log <span class="nt">--patch</span> mars.txt
</code></pre></div>  </div>

  <p>You should get a long list of output, and you should be able to see both commit messages and 
the difference between each commit.</p>

  <p>Question: What does the following command do?</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git log <span class="nt">--patch</span> HEAD~9 <span class="k">*</span>.txt
</code></pre></div>  </div>
</blockquote>
:ET